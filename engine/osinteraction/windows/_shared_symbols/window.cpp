// This source has been automatically generated by Lexgine Runtime API generation system and is not intended to be modified by the end user.
// 
//
// Copyright 2021 Alex Bibov
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
// 
//    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// 
//    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the 
//       documentation and/or other materials provided with the distribution.
// 
//    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this 
//       software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include <engine/osinteraction/windows/window.h>
#include <preprocessor_tokens.h>

namespace lexgine::osinteraction::windows::_shared_symbols {

using WindowStyle = Window::WindowStyle;
using WindowExStyle = Window::WindowExStyle;

extern "C" {

    LEXGINE_API void* lexgineOsinteractionWindowsXXXXWindowXXXXWindowCreateInstanceYYHINSTANCEYYWindowStyleYYWindowExStyle(HINSTANCE hInstance, WindowStyle window_style, WindowExStyle window_ex_style)
    {
        return new Window{ hInstance, window_style, window_ex_style };
    }

    LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXDestroyInstance(void* p_instance)
    {
        delete reinterpret_cast<Window*>(p_instance);
    }



    LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXsetDimensionsYYuint32_tYYuint32_t(void* p_instance, uint32_t width, uint32_t height)
    {
        reinterpret_cast<Window*>(p_instance)->setDimensions(width, height);
    }

    LEXGINE_API core::math::Vector2u lexgineOsinteractionWindowsXXXXWindowXXXXgetLocation(void* p_instance)
    {
        reinterpret_cast<Window*>(p_instance)->getLocation();
    }

    LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXsetVisibilityYYbool(void* p_instance, bool visibility_flag)
    {
        reinterpret_cast<Window*>(p_instance)->setVisibility(visibility_flag);
    }

    LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXsetDimensionsYYcore__math__Vector2uCONSTLREF(void* p_instance, core::math::Vector2u const& dimensions)
    {
        reinterpret_cast<Window*>(p_instance)->setDimensions(dimensions);
    }

    LEXGINE_API core::math::Vector2u lexgineOsinteractionWindowsXXXXWindowXXXXgetDimensions(void* p_instance)
    {
        reinterpret_cast<Window*>(p_instance)->getDimensions();
    }

    LEXGINE_API core::math::Rectangle lexgineOsinteractionWindowsXXXXWindowXXXXgetClientArea(void* p_instance)
    {
        reinterpret_cast<Window*>(p_instance)->getClientArea();
    }

    LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXsetLocationYYcore__math__Vector2uCONSTLREF(void* p_instance, core::math::Vector2u const& location)
    {
        reinterpret_cast<Window*>(p_instance)->setLocation(location);
    }

    LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXsetTitleYYstd__wstringCONSTLREF(void* p_instance, std::wstring const& title)
    {
        reinterpret_cast<Window*>(p_instance)->setTitle(title);
    }

    LEXGINE_API std::wstring lexgineOsinteractionWindowsXXXXWindowXXXXgetTitle(void* p_instance)
    {
        reinterpret_cast<Window*>(p_instance)->getTitle();
    }

    LEXGINE_API bool lexgineOsinteractionWindowsXXXXWindowXXXXgetVisibility(void* p_instance)
    {
        reinterpret_cast<Window*>(p_instance)->getVisibility();
    }

    LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXsetLocationYYuint32_tYYuint32_t(void* p_instance, uint32_t x, uint32_t y)
    {
        reinterpret_cast<Window*>(p_instance)->setLocation(x, y);
    }



}

}
