// This source has been automatically generated by Lexgine Runtime API generation system and is not intended to be modified by the end user.
// 
//
// Copyright 2022 Alex Bibov
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
// 
//    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// 
//    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the 
//       documentation and/or other materials provided with the distribution.
// 
//    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this 
//       software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include <engine/osinteraction/windows/window.h>

namespace lexgine::osinteraction::windows::_shared_symbols{

namespace{
using WindowExStyle = lexgine::osinteraction::windows::Window::WindowExStyle;
using WindowStyle = lexgine::osinteraction::windows::Window::WindowStyle;





}

extern "C" {




LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXCreateInstanceYYHINSTANCEYYWindowStyleYYWindowExStyle(void* p_destination, HINSTANCE hInstance, WindowStyle window_style, WindowExStyle window_ex_style)
{
	new (p_destination) lexgine::osinteraction::windows::Window{hInstance, window_style, window_ex_style};
}

LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXDestroyInstance(void* p_instance)
{
	reinterpret_cast<lexgine::osinteraction::windows::Window*>(p_instance)->~Window();
}

void lexgineOsinteractionWindowsXXXXWindowXXXXDestroyInstance__deleter(void* p_instance)
{
	delete reinterpret_cast<lexgine::osinteraction::windows::Window*>(p_instance);
}





LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXgetLocation_RTNTYPE_coreMathVector2u_LVALREF_(void const* p_instance, core::math::Vector2u& destination)
{
	destination = reinterpret_cast<lexgine::osinteraction::windows::Window const*>(p_instance)->getLocation();
}

LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXsetVisibilityYYbool(void * p_instance, bool visibility_flag)
{
	 reinterpret_cast<lexgine::osinteraction::windows::Window *>(p_instance)->setVisibility(visibility_flag);
}

LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXsetDimensionsYYcoreMathVector2u_CONST_LVALREF_(void * p_instance, core::math::Vector2u const & dimensions)
{
	 reinterpret_cast<lexgine::osinteraction::windows::Window *>(p_instance)->setDimensions(dimensions);
}

LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXsetDimensionsYYuint32_tYYuint32_t(void * p_instance, uint32_t width, uint32_t height)
{
	 reinterpret_cast<lexgine::osinteraction::windows::Window *>(p_instance)->setDimensions(width, height);
}

LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXsetTitleYYstdWstring_CONST_LVALREF_(void * p_instance, std::wstring const & title)
{
	 reinterpret_cast<lexgine::osinteraction::windows::Window *>(p_instance)->setTitle(title);
}

LEXGINE_API bool lexgineOsinteractionWindowsXXXXWindowXXXXgetVisibility(void const* p_instance)
{
	return reinterpret_cast<lexgine::osinteraction::windows::Window const*>(p_instance)->getVisibility();
}

LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXsetLocationYYuint32_tYYuint32_t(void * p_instance, uint32_t x, uint32_t y)
{
	 reinterpret_cast<lexgine::osinteraction::windows::Window *>(p_instance)->setLocation(x, y);
}

LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXgetTitle_RTNTYPE_stdWstring_LVALREF_(void const* p_instance, std::wstring& destination)
{
	destination = reinterpret_cast<lexgine::osinteraction::windows::Window const*>(p_instance)->getTitle();
}

LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXsetLocationYYcoreMathVector2u_CONST_LVALREF_(void * p_instance, core::math::Vector2u const & location)
{
	 reinterpret_cast<lexgine::osinteraction::windows::Window *>(p_instance)->setLocation(location);
}

LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXgetDimensions_RTNTYPE_coreMathVector2u_LVALREF_(void const* p_instance, core::math::Vector2u& destination)
{
	destination = reinterpret_cast<lexgine::osinteraction::windows::Window const*>(p_instance)->getDimensions();
}

LEXGINE_API void lexgineOsinteractionWindowsXXXXWindowXXXXgetClientArea_RTNTYPE_coreMathRectangle_LVALREF_(void const* p_instance, core::math::Rectangle& destination)
{
	destination = reinterpret_cast<lexgine::osinteraction::windows::Window const*>(p_instance)->getClientArea();
}

LEXGINE_API bool lexgineOsinteractionWindowsXXXXWindowXXXXshouldClose(void const* p_instance)
{
	return reinterpret_cast<lexgine::osinteraction::windows::Window const*>(p_instance)->shouldClose();
}


}

}
