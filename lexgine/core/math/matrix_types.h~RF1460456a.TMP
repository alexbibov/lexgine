#ifndef LEXGINE_CORE_MATH_MATRIX_TYPES_H
#define LEXGINE_CORE_MATH_MATRIX_TYPES_H

#include "3rd_party/glm/matrix.hpp"
#include "3rd_party/glm/gtc/matrix_integer.hpp"


namespace lexgine::core::math {

#ifndef GENERALIST_MATRIX_TYPES
#define GENERALIST_MATRIX_TYPES
using Matrix4f = glm::mat4;
using Matrix3f = glm::mat3;
using Matrix2f = glm::mat2;
using Matrix4x3f = glm::mat4x3;
using Matrix4x2f = glm::mat4x2;
using Matrix3x4f = glm::mat3x4;
using Matrix2x4f = glm::mat2x4;
using Matrix3x2f = glm::mat3x2;
using Matrix2x3f = glm::mat2x3;

using Matrix4d = glm::dmat4;
using Matrix3d = glm::dmat3;
using Matrix2d = glm::dmat2;
using Matrix4x3d = glm::dmat4x3;
using Matrix4x2d = glm::dmat4x2;
using Matrix3x4d = glm::dmat3x4;
using Matrix2x4d = glm::dmat2x4;
using Matrix3x2d = glm::dmat3x2;
using Matrix2x3d = glm::dmat2x3;

using Matrix4i = glm::imat4;
using Matrix3i = glm::imat3;
using Matrix2i = glm::imat2;
using Matrix4x3i = glm::imat4x3;
using Matrix4x2i = glm::imat4x2;
using Matrix3x4i = glm::imat3x4;
using Matrix2x4i = glm::imat2x4;
using Matrix3x2i = glm::imat3x2;
using Matrix2x3i = glm::imat2x3;

using Matrix4u = glm::umat4;
using Matrix3u = glm::umat3;
using Matrix2u = glm::umat2;
using Matrix4x3u = glm::umat4x3;
using Matrix4x2u = glm::umat4x2;
using Matrix3x4u = glm::umat3x4;
using Matrix2x4u = glm::umat2x4;
using Matrix3x2u = glm::umat3x2;
using Matrix2x3u = glm::umat2x3;
#endif

}

#endif