<?xml version="1.0" encoding="UTF-8"?>

<!-- use <ComputePSO> </ComputePSO> to define compute pipeline states -->
<!-- This code snippet demonstrates example of graphics PSO descriptor serialized to XML format.
This serialization is heavily tailored to Direct3D 12 and its main purpose is to operate as 
a mediator between the runtime backend and more high-level API-agnostic XML description of 
materials. Note that all sections under <GraphicsPSO> </GraphicsPSO> and <ComputePSO> </ComputePSO>
can be stated only once until explicitly mentioned otherwise. In contrast to this, it IS allowed 
to have several pipeline state definitions within the same XML script, in which case the backend
will parse and compile all of them.
-->

<!--
Each graphics PSO may define a number of attributes, all of which are optional.
"name"    descriptive string name of the graphics PSO. This attribute is optional; if not provided, the system assigns auto-generated value
"primitive_restart"    when equals 'TRUE' primitive restart is enabled. Default is 'FALSE'
"primitive_topology"    primitive topology assumed by the primitive assembler. Allowed values are predefined keywords POINT, LINE, TRIANGLE, PATCH. Default is TRIANGLE
"sample_mask"    mask applied to the sub-pixel samples when multi-sampling is enabled. Default is 0xFFFFFFFF, which means that all samples are in use.
"sample_count"    number of samples. Default is "1", which means no MSAA.
"sample_quality"    quality of multi-sampling. The maximal value supported by this attribute is determined by graphics driver. Usually on modern hardware the only supported 
                    value is 0 and this is also the default value for this attribute. Therefore, using of this attribute is not recommended and it's better to omit it altogether
                    thus effectively falling back to the default.
-->
<GraphicsPSO
name="SampleGraphicsPSO"
primitive_restart="FALSE" 
primitive_topology="TRIANGLE" 
sample_mask="0xFFFFFFFF" 
sample_count="1" 
sample_quality="0"> 

<!-- all shader declarations except vertex and pixel are optional. If not provided the PSO-from-XAML loader
will not generate the corresponding shader blobs for the PSO descriptor it produces. Each shader entry
of each type can be declared only once. Each shader declaration must have one obligatory attribute 'main', which
identifies the entry point of the shader.
-->
<VertexShader entry="VS_main">sample.vs.hlsl</VertexShader>
<HullShader entry="HS_main">sample.hs.hlsl</HullShader>
<DomainShader entry="DS_main">sampler.ds.hlsl</DomainShader>
<GeometryShader entry="GS_main">sampler.gs.hlsl</GeometryShader>
<PixelShader entry="PS_main">sampler.ps.hlsl</PixelShader>

<!-- StreamOutput defines stream output for the pipeline state object. This declaration is optional.
Only one StreamOutput entry may appear per pipeline description.
If not provided, the stream output will not be used.
NOTE: NULL, TRUE and FALSE below are reserved key words.

The meaning of the attributes is as follows:

attribute "rasterized_stream" defines which stream to be sent to the rasterizer stage. The attribute is optional and defaults to 0.
This attribute can also receive special value "NULL", which means that rasterization stage will be totally omitted.

attribute "strides" determines single element stride of each buffer attached to the stream output stage of the pipeline. The strides
must always be present and are defined as a comma separated list of numeric values

attribute "stream" declares the index of output stream. This attribute is optional and defaults to 0.

attribute "name" declares Direct3D string semanics to be used to perform output into the stream on the shader side.
note that "name" can also be assigned to special value NULL, which means that the declaration entry does not declare actual output,
but a gap, where the size of the gap is determined by the value of attribute "component_count"

attribute "name_index" declares index to be used with the string semantics. This attribute is optional and is defaulted to 0.

attribute "start_component" is the first component to be written into the output stream

attribute "component_count" number of components to be written into the stream (must be between 1 and 4 until "name" is NULL)

attribute "slot" determines the slot, to which the buffer receiving the output data should be bound

-->
<StreamOutput rasterized_stream="FALSE" strides="16, 112, 16">
<DeclarationEntry stream="0" name="SemanticsOutputStream" name_index="0" start_component="0" component_count="4" slot="0" />
<DeclarationEntry stream="1" name="AnotherElementToTheSameStream" name_index="0" start_component="0" component_count="3" slot="1" />
<DeclarationEntry stream="1" name="NULL" start_component="0" component_count="100" slot="1" />
<DeclarationEntry stream="2" name="AnotherOutputStream" start_component="0" component_count="4" slot="2" />
</StreamOutput>

<!-- The following entry defines blending state of the pipeline state object. This entry is optional and if not provided the blending stage will be disabled.
When provided, the entry must be included only once into the pipeline description. Declaring multiple blending operations for different render targets is done
using <BlendDescriptor> entry as demonstrated below.


This entry has two optional attributes, both of which are defaulted to FALSE:

attribute "alpha_to_coverage" controls the state of alpha to coverage; when this attribute is TRUE the alpha values will be written to coverage attribute 
in the pixel shader

attribute "independent_blending" controls enable state of independent blending. When independent blending is enabled, one can use different blending operations
for different pixel shader output channels during the blending stage of the pipeline
-->
<BlendState alpha_to_coverage="FALSE" independent_blending="TRUE">

<!-- Blend descriptors are declared separately for each render target (see attribute "render_target" below). Up to 8 render targets are currently supported. 
Each BlendDescriptor entry supports the following attributes:

attribute "render_target" determines render target, to which the blend descriptor applies

attribute "enable_blending" identifies whether blending operation is enabled for the render target assigned to the blend descriptor. This attribute is 
optional and defaults to TRUE

attribute "enable_logic_operation" identifies whether to enable logic operation for the render channel assigned to the blend descriptor. This attribute is
not obligatory. Its default value is FALSE


*****The following attributes are related to blending and only have effect when enable_blending is TRUE*****

Blending factors are defined by the agency of the following attributes. 

attribute "source_blend_factor" identifies color blending factor of the source (pixel shader output). Default value is ONE.
attribute "destination_blend_factor" identifies color blending factor of the destination (framebuffer). Default value is ZERO.
attribute "source_alpha_blend_factor" identifies blending factor applied to the alpha-channel of the source (pixel shader output). Default value is ONE.
attribute "destination_alpha_blend_factor" identifies blending factor applied to the alpha-channel of the destination (framebuffer). Default value is ZERO.

The blend factor attributes listed above can take one of the following values:
    
	ZERO,
    ONE,
    SOURCE_COLOR,
    ONE_MINUS_SOURCE_COLOR,
    SOURCE_ALPHA,
    ONE_MINUS_SOURCE_ALPHA,
    DESTINATION_ALPHA,
    ONE_MINUS_DESTINATION_ALPHA,
    DESTINATION_COLOR,
    ONE_MINUS_DESTINATION_COLOR,
    SOURCE_ALPHA_SATURATION,
    CUSTOM_CONSTANT,
    ONE_MINUS_CUSTOM_CONSTANT,
    SOURCE1_COLOR,
    ONE_MINUS_SOURCE1_COLOR,
    SOURCE1_ALPHA,
    ONE_MINUS_SOURCE1_ALPHA


Blend operation is defined using the following attributes:

attribute "blend_operation" identifies blend operation applied to the RGB-channels of the source (pixel shader output) and
the destination (framebuffer) fragments. Defauls to ADD.

attribute "alpha_blend_operation" identifies blend operation applied to the alpha-channel of the source (pixel shader output) and
the destination (framebuffer) fragments. Defaults to ADD.

These blend operation attributes can take one of the following values

    ADD,    (meaning: source + destination)
    SUBTRACT,    (meaning: source - destination)
    REVERSE_SUBTRACT,    (meaning: destination - source)
    MIN,    (meaning: min(source, destination))
    MAX,    (meaning: max(source, destination))
	
	
*****The following attributes are related to logical operations and only have effect when enable_logic_operation is TRUE*****

attribute "logical_operation" identifies the logical operation to be applied. This attribute is optional and its default
value is NO_OPEATION. The attribute accepts one of the following predefined values:
	CLEAR,
    SET,
    COPY,
    COPY_INVERTED,
    NO_OPEATION,
    INVERT,
    AND,
    NAND, (meaning: logical "not and")
    OR,
    NOR, (meaning: logical "not or")
    XOR,
    EQUIV, (meaning: logical "equity", i.e. true iff both operands have same logical value)
    AND_THEN_REVERSE,   (meaning: performs logical "and" and then reverses the result, i.e. computes 1 - result)
    AND_THEN_INVERT,    (meaning: performs logical "and" and then inverts the bit order of the result)
    OR_THEN_REVERSE,   (meaning: performs logical "or" and then reverses the result, i.e. computes 1 - result)
    OR_THEN_INVERT    (meaning: performs logical "or" and then inverts the bit order of the result)


attribute "color_mask" identifies which components of the color channel will be written during the blend operation.
This attribute accepts numeric constants between 0x0 and 0xF with each bit of this constant corresponding to red, green,
blue and alpha channels counting from the most significant to the least significant bit in this order. 
Those components that have their corresponding bits set are enabled for writing. 
This attribute is optional and is defaulted to 0xF, which means that all color channels are written.

-->

<BlendDescriptor render_target="0" source_blend_factor="DESTINATION_ALPHA" destination_blend_factor="ONE_MINUS_SOURCE_ALPHA" blend_operation="ADD"
source_alpha_blend_factor="ZERO" destination_alpha_blend_factor="ONE" alpha_blend_operation="ADD"
logical_operation="NO_OPEATION" color_mask="0xF" />

<BlendDescriptor render_target="1" source_blend_factor="SOURCE_ALPHA" destination_blend_factor="DESTINATION_ALPHA" blend_operation="MAX"
source_alpha_blend_factor="ZERO" destination_alpha_blend_factor="ONE" alpha_blend_operation="REVERSE_SUBTRACT"
logical_operation="NO_OPEATION" color_mask="0x9" />    <!-- here only red and alpha channels are written-->

</BlendState>



<!--Rasterizer descriptors define how rasterization should be performed by the graphics pipeline. There could be only one such entry
per pipeline description. This entry is optional. If not provided, default values for all attributes this entry supports will be used.


This entry has the following attributes, all of which are optional:

"fill_mode" defines primitive filling mode and can be assigned to either SOLID or WIREFRAME, both of which are predefined keywords.
The default value is SOLID.

"cull_mode" defines the culling mode and can be assigned to FRONT (cull the front facing polygones), BACK (cull the back facing polygones),
or NONE (disables culling). The default values is BACK.

"front_face_winding" defines, which vertex winding to consider as the hint for "front facing" polygone. The attribute can be 
CLOCKWISE (vertices listed in clockwise order are considered to define a front facing polygone) or COUNTERCLOCKWISE (vertices 
listed in counter clockwise order produce front facing polygones). Default value is COUNTERCLOCKWISE.

"depth_bias" depth value added to a given pixel. Can be any integer. Default is 0

"depth_bias_clamp" maximum depth bias of a pixel. Can be any floating point value. Default is 0.0

"slope_scaled_depth_bias" scalar on a given pixel's slope. Can be any floating point value. Default is 0.

"depth_clip" determines if z-clipping is enabled. Can be TRUE or FALSE. Default is TRUE.

"line_anti_aliasing" enables anti-aliased line drawing when TRUE. This has effect only when drawing lines. Default is FALSE.

"multi_sampling" enables quadrilateral anti-aliasing on MSAA render targets when TRUE. Default is FALSE. When this attribute is TRUE
this forces the attibute "line_anti_aliasing" to FALSE.

"concervative_rasterization" enables concervative rasterization when TRUE on hardware that supports it. Note that setting this 
attribute to TRUE on hardware that does not support concervative rasterization may cause failures. The default is FALSE. -->

<RasterizerDescriptor fill_mode="SOLID" cull_mode="BACK" front_face_winding="COUNTERCLOCKWISE" multi_sampling="TRUE" 
concervative_rasterization="TRUE"/>

<!-- Depth-stencil descriptor is used to define functionality of the depth and stencil tests. There could be only one depth stencil
descriptor per pipeline definition. Depth-stencil descriptors support the following attributes:

"enable_depth_test" controls enable state of the depth test. Can be TRUE or FALSE. The default is TRUE.

"allow_depth_writes" when FALSE, the values that pass the depth test will not be written into the depth buffer. The default is TRUE, which allows
depth buffer updates.

"depth_test_comparison_function" defines comparison function used by the depth test. This attribute may be assigned to one of the following predefined
values:
    NEVER (never pass the comparison),
    LESS (passes if source data is less then destination data),
    EQUAL (passes if source data is equal to destination data),
    LESS_OR_EQUAL (passes if source data is less than or equal to the destination data),
    GREATER (passes if source data is greater than destination data),
    NOT_EQUAL (passes if source data is not equal to the destination data),
    GREATER_EQUAL (passes if source data is greater than or equal to the destination data),
    ALWAYS (depth test always passes)
The defaults value for depth_test_comparison_function is LESS

"enable_stencil_test" controls enable state of the stencil test. The default is FALSE, which means that the stencil test is disabled.

"stencil_read_mask" integer single-byte value in range from 0x0 to 0xFF, which identifies the portion of the stencil buffer, from which to
extract the stencil data. Using this attribute only makes sence when depth and stencil data are packed together. The default is 0xFF.

"stencil_write_mask" integer single-byte value in range from 0x0 to 0xFF, which identifies to which portion of the stencil buffer the stencil
data will be written. Using this attribute only makes sence when depth and stencil data are packed together. The default is 0xFF.


Depth stencil descriptor supports child entries called "StencilTestBehavior". There can be at most two such entries 
determining behavior of stencil test as applies to front and back polygone faces, i.e. one entry can define 
behavior for the front faces and one entry — for the back faces. Listing multiple entries defining different behavior for
same polygone faces is not allowed as it makes no sense. Each StencilTestBehavior entry supports the following
attributes:

"face" can be either FRONT or BACK and determines to which polygone faces this behavior applies

"comparison_function" determines comparison function of the stencil test and can be one of the following predefined
tokens:

    NEVER (never pass the comparison),
    LESS (passes if source data is less then destination data),
    EQUAL (passes if source data is equal to destination data),
    LESS_OR_EQUAL (passes if source data is less than or equal to the destination data),
    GREATER (passes if source data is greater than destination data),
    NOT_EQUAL (passes if source data is not equal to the destination data),
    GREATER_EQUAL (passes if source data is greater than or equal to the destination data),
    ALWAYS (depth test always passes)
	
"operation_st_fail" determines action performed on the stencil buffer when stencil test fails.
This attribute may take on of the following tokens:

    KEEP (keep existing data),
    ZERO (set stencil data to zero),
    REPLACE (replace stencil data with reference value),
    INCREMENT_AND_SATURATE (increment currently stored stencil value by one and clamp the result),
    DECREMENT_AND_SATURATE (decrement currently stored stencil value by one and clamp the result)
    INVERT (invert stencil data, i.e. inverse the bit order),
    INCREMENT (increment current stencil value),
    DECREMENT (decrement current stencil value)
Default value for this attribute is "KEEP"

"operation_st_pass_dt_fail" determines action performed on the stencil buffer when depth test fails and stencil test passes.
This attribute accepts values from the same predefined set as "operation_st_fail". The attribute is optional and defaults to "KEEP"

"operation_st_pass_dt_pass" determines action performed on the stencil buffer when both depth and stencil tests are passed.
This attribute accepts values from the same predefined set as "operation_st_fail". The attribute is optional and defaults to "KEEP"
    
"dsv_target_format" identifies DXGI format to be used by the depth-stencil target. One of the following predefined 
values is allowed:

    DXGI_FORMAT_D32_FLOAT_S8X24_UINT
    DXGI_FORMAT_D32_FLOAT
    DXGI_FORMAT_D24_UNORM_S8_UINT
    DXGI_FORMAT_D16_UNORM

	
An example of depth stencil descriptor is provided below.
-->
<DepthStencilDescriptor enable_depth_test="TRUE" allow_depth_writes="TRUE"
depth_test_comparison_function="LESS" enable_stencil_test="TRUE">
<StencilTestBehavior face="FRONT" comparison_function="NOT_EQUAL" 
operation_st_fail="ZERO" operation_st_pass_dt_fail="ONE" operation_st_pass_dt_pass="ONE"
dsv_target_format="DXGI_FORMAT_D24_UNORM_S8_UINT"/>
</DepthStencilDescriptor>

<!--
NOTE: if stencil test is disabled one can use shorter definition for DepthStencilDescriptor as follows:

<DepthStencilDescriptor enable_depth_test=TRUE, allow_depth_writes=TRUE,
depth_test_comparison_function=LESS />

-->


<!-- 
Vertext attribute specification contains list of vertex attributes. The maximal number of vertex attributes is 16
-->
<VertexAttributeSpecification>
<!--
Each vertex attribute define name and index semantics. For example, if string semantics of certain attribute is "MyAttribute" and index is 5, then
the correspoding input attribute in HLSL shader will be identified by "MyAttribute5" semantics. In addition to semantics properties vertex attribute must
define the size (i.e. the number of components) of the attribute, its type and whether the data in the attribute is stored in normalized format. For the size 
supported values are 1, 2, 3, or 4. Type can get on the following predefined values: FLOAT16 (half-precision floats), FLOAT32, INT16, INT32, UINT16, or UINT32.
The "normalized" attribute is optional and defaults to FALSE. 

Finally, optional attribute "instancing_rate" identifies whether the data in the corresponding vertex buffer should be instances and how many draw calls are made
before advancing one element in the buffer. Wher instancing_rate is 0, the data in the buffer is not instanced. The default value for this attribute is 0, which
means that no instancing is applied by default.
-->
<VertexAttribute name="SV_Position" index="0" size="4" type="FLOAT32" normalized="TRUE" instancing_rate="0" />
</VertexAttributeSpecification>

<!--
Render target descriptor defines output render target of the PSO. Up to 8 render targets can be defined within single PSO. Each render 
target is attached to an output slot indexed from 0 to 7. The output slot is determined by the "slot" attribute of the RenderTarget specifier. 
Note that there can be no two render targets sharing the same output slot.
Besides the "slot" attribute render targets also support attribute "format", which is one of DXGI formats allowed to be used with the render targets.
More precisely, "format" can get one of the following predefined keywords (some other are also allowed, but those listed below can be used most safely;
for the full list refer to MSDN page https://msdn.microsoft.com/en-us/library/windows/desktop/ff471325 )
DXGI_FORMAT_R32G32B32A32_FLOAT
DXGI_FORMAT_R16G16B16A16_FLOAT
DXGI_FORMAT_R16G16B16A16_UNORM
DXGI_FORMAT_R16G16B16A16_SNORM
DXGI_FORMAT_R32G32_FLOAT
DXGI_FORMAT_R10G10B10A2_UNORM
DXGI_FORMAT_R11G11B10_FLOAT
DXGI_FORMAT_R8G8B8A8_UNORM
DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
DXGI_FORMAT_R8G8B8A8_SNORM
DXGI_FORMAT_R16G16_FLOAT
DXGI_FORMAT_R16G16_UNORM
DXGI_FORMAT_R16G16_SNORM
DXGI_FORMAT_R32_FLOAT
DXGI_FORMAT_R8G8_UNORM
DXGI_FORMAT_R8G8_SNORM
DXGI_FORMAT_R16_FLOAT
DXGI_FORMAT_R16_UNORM
DXGI_FORMAT_R16_SNORM
DXGI_FORMAT_R8_UNORM
DXGI_FORMAT_R8_SNORM
DXGI_FORMAT_A8_UNORM
DXGI_FORMAT_B5G6R5_UNORM
-->
<RenderTarget slot="0" format="DXGI_FORMAT_R16G16B16A16_UNORM" />
<RenderTarget slot="1" format="DXGI_FORMAT_R16G16B16A16_FLOAT" />

</GraphicsPSO>